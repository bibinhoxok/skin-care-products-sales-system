import { z } from 'zod';
import { extendZod, zId, zUUID } from "@zodyac/zod-mongoose";
import addressData from "@/data/address.json";

// Extend zod with the zId and zUUID functions (!!important)
extendZod(z); 

// Define the phone regex for Vietnamese phone number
const phoneRegex = new RegExp(
    /(84|0[3|5|7|8|9])+([0-9]{8})\b/g
)

// Extract address IDs
const provinceIds = addressData.province.map((province) => province.idProvince);
const districtIds = addressData.district.map((district) => district.idDistrict);
const communeIds = addressData.commune.map((commune) => commune.idCommune);

// Define the schema (!!important)
export const CustomerSchema = z.object({
    name: z.string().min(3).max(20).default("test"),
    email: z.string().email(),
    password: z.string().min(8).max(20),
    phone: z.optional(z.string().regex(phoneRegex)),
    address: z.optional(
        z.union([
            z.object({
                // Check if the provinceId is valid
                // data from @/data/address.json
                provinceId: z.string().optional().refine((value) => value == null || provinceIds.includes(value), {
                    message: "Invalid provinceId",
                }),
                districtId: z.string().optional().refine((value) => value == null || districtIds.includes(value), {
                    message: "Invalid districtId",
                }),
                communeId: z.string().optional().refine((value) => value == null || communeIds.includes(value), {
                    message: "Invalid communeId",
                }),
                detail: z.string(),
            }),
            z.undefined()
        ])
    ),
    skinType: z.array(z.string()).default([]), //should refer to a list of skin types in the database (!!important)
    loyaltyPoints: z.number().default(0), //there is no need to use membershipLevel as it can be calculated from loyaltyPoints
    //default value will be generated by mongoose
    createdAt: z.date().default(new Date()), 
    updatedAt: z.date().default(new Date()),
});


// Define the schema with the ID (!!important)
export const zCustomerSchemaUdate = CustomerSchema.extend({
    _id: zUUID(), //default value will be generated by mongoose
})

export type Customer = z.infer<typeof CustomerSchema>;